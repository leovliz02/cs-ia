<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Manager Portal â€“ Teams</title>
  {% load static%}
  <link rel="stylesheet" href="{% static 'styles.css' %}">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background: #f8f9fa;
    }

    header {
      background: #007bff;
      color: white;
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    header h1 {
        margin: 0;
        flex-grow: 1;
        text-align: center;
    }

    .logout-link {
        color: white;
        text-decoration: none;
        font-weight: bold;
        padding: 0.5rem 1rem;
        border: 1px solid white;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .logout-link:hover {
        background-color: rgba(255, 255, 255, 0.2);
    }

    nav {
      display: flex;
      background: #eee;
      border-bottom: 1px solid #ccc;
    }

    nav a {
      flex: 1;
      text-align: center;
      padding: 1rem;
      text-decoration: none;
      font-weight: bold;
      color: black;
      border-bottom: 3px solid transparent;
    }

    nav a.active {
      background: white;
      border-bottom: 3px solid #007bff;
      color: #007bff;
    }
    
    nav a:hover {
      background-color: #e1dfdf;
    }

    .container {
      max-width: 1000px;
      margin: 2rem auto;
      padding: 1rem;
      background: white; 
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1); 
    }

    .top-bar {
      display: flex;
      justify-content: flex-end;
      margin-bottom: 1rem;
    }

    .top-bar button {
      background-color: #007bff;
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }
    .top-bar button:hover {
        background-color: #0056b3;
    }

    .team-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .team-box {
      flex: 1 1 250px;
      background: white;
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
      text-align: center;
      font-size: 1.5rem;
      transition: transform 0.2s ease;
      cursor: pointer;
    }

    .team-box:hover {
      transform: scale(1.02);
    }

  
    .popup-bg {
      display: none;
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0, 0, 0, 0.4);
      justify-content: center;
      align-items: center;
      z-index: 10;
    }

    .popup {
      background: white;
      padding: 2rem;
      border-radius: 10px;
      width: 400px;
      max-width: 90%;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
      max-height: 90vh; 
      overflow-y: auto;
    }

    .popup h3 {
      margin-top: 0;
    }

    .popup label {
      display: block;
      margin-top: 1rem;
      font-weight: bold;
    }

    .popup input, .popup select {
      width: 100%;
      padding: 0.5rem;
      margin-top: 0.3rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box; 
    }

    .popup .actions {
      display: flex;
      justify-content: space-between;
      margin-top: 1.5rem;
    }

    .popup .actions button {
      padding: 0.5rem 1rem;
      font-size: 1rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .popup .actions .save {
      background-color: #007bff;
      color: white;
    }
    .popup .actions .save:hover { background-color: #0056b3; }

    .popup .actions .delete {
      background-color: #dc3545;
      color: white;
    }
    .popup .actions .delete:hover { background-color: #c82333; }

    .popup .actions .cancel {
      background-color: #6c757d;
      color: white;
    }
    .popup .actions .cancel:hover { background-color: #5a6268; }

    .member-list {
        list-style: none;
        padding: 0;
        margin-top: 0.5rem;
        max-height: 100px;
        overflow-y: auto;
        border: 1px solid #eee;
        border-radius: 4px;
    }

    .member-list li {
        padding: 0.3rem 0.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #f9f9f9;
    }
    .member-list li:last-child {
        border-bottom: none;
    }

    .member-list .remove-btn {
        background: none;
        border: none;
        color: #dc3545;
        cursor: pointer;
        font-size: 0.9rem;
        padding: 0 5px;
    }

    .add-user-section {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
        align-items: flex-end;
    }

    .add-user-section select {
        flex-grow: 1;
        margin-top: 0;  
    }

    .add-user-section button {
        padding: 0.5rem 1rem;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
    }
    .add-user-section button:hover {
        background-color: #218838;
    }

    .report-section {
        margin-top: 2rem;
        padding: 1.5rem;
        background: #e9ecef;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        text-align: center;  
    }

    .report-section h3 {
        margin-top: 0;
        color: #343a40;
    }

    .report-button {
        background-color: #007bff;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }
    .report-button:hover {
        background-color: #2573c6;
    }


    #efficiencyReportPopup .popup {
        width: 600px; 
        max-width: 95%;
    }

    #efficiencyReportPopup h3 {
        text-align: center;
        margin-bottom: 1.5rem;
    }

    #efficiencyReportContent {
        margin-top: 1rem;
    }

    #efficiencyReportContent table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
    }

    #efficiencyReportContent th,
    #efficiencyReportContent td {
        padding: 0.75rem;
        border: 1px solid #ddd;
        text-align: left;
    }

    #efficiencyReportContent th {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    .efficiency-rating-cell {
        font-weight: bold;
    }
    .efficiency-rating-cell.high {
        color: #28a745; 
    }

    .efficiency-rating-cell.medium {
        color: #ffc100; 
    }
    .efficiency-rating-cell.low {
        color: #dc3545; 
    }

    #reportPopupCloseBtn {
        background-color: #6c757d;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 1.5rem;
        display: block; 
        margin-left: auto;
        margin-right: auto;
        transition: background-color 0.3s ease;
    }
    #reportPopupCloseBtn:hover {
        background-color: #5a6268;
    }
  </style>
</head>
<body>
  <header>
    <h1> Manager Portal</h1>
    <a href="{% url 'logout' %}" class="logout-link">Logout</a>
  </header>

  <nav>
    <a href="{% url 'manager_teams_page' %}" class="active">Teams</a>
    <a href="{% url 'manager_demands_page' %}">Demands</a>
    <a href="{% url 'manager_approvals_page' %}">Approvals Pending</a>
  </nav>

  <div class="container">
    <div class="top-bar">
      <button id="addNewTeamBtn">+ Add New Team</button>
    </div>
    <div class="team-grid" id="teamsContainer">
      {# loading team data into the table #}
      <p id="loadingMessage">Loading teams...</p>
      <p id="noTeamsMessage" style="display:none;">No teams found. Click "Add New Team" to get started!</p>
    </div>

    <!-- Teams Efficiency Report Section  -->
    <div class="report-section">
        <h3>Teams Efficiency Report</h3>
        <button id="generateReportBtn" class="report-button">Generate Report</button>
    </div>
  </div>

  <!-- Popup for Add/Edit Team -->
  <div class="popup-bg" id="teamPopup">
    <div class="popup">
      <h3 id="popupTitle"></h3> 
      <input type="hidden" id="teamId" />

      <label for="teamName">Team Name:</label>
      <input type="text" id="teamName" />

      <label>Current Team Members:</label>
      <ul id="currentTeamMembersList" class="member-list">
        <li>No members yet.</li> 
      </ul>

      <div class="add-user-section">
        <select id="availableUsersSelect">
          <option value="">Select user to add</option>
        </select>
        <button id="addUserToTeamBtn">Add User</button>
      </div>

      <div class="actions">
        <button class="save" id="saveTeamBtn">Save</button>
        <button class="delete" id="deleteTeamBtn">Delete</button>
        <button class="cancel" id="cancelPopupBtn">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Popup for Efficiency Report -->
  <div class="popup-bg" id="efficiencyReportPopup">
    <div class="popup">
        <h3>Teams Efficiency Report</h3>
        <div id="efficiencyReportContent">
            <p id="reportLoadingMessage" style="display:none; text-align: center;">Generating report...</p>
            <p id="reportErrorMessage" style="display:none; color: red; text-align: center;"></p>
            <p id="reportNoDataMessage" style="display:none; text-align: center;">No data to generate report. Ensure teams have completed demands.</p>
            <table id="efficiencyReportTable" style="display:none;">
                <thead>
                    <tr>
                        <th>Team Name</th>
                        <th>Rating</th>
                        <th>Early</th>
                        <th>On-Time</th>
                        <th>Overdue</th>
                        <th>Total Completed</th>
                    </tr>
                </thead>
                <tbody id="efficiencyReportTableBody">
                </tbody>
            </table>
        </div>
        <button id="reportPopupCloseBtn">Close</button>
    </div>
  </div>

  <script>
    const teamsContainer = document.getElementById('teamsContainer');
    const loadingMessage = document.getElementById('loadingMessage');
    const noTeamsMessage = document.getElementById('noTeamsMessage');
    const teamPopup = document.getElementById('teamPopup');
    const popupTitle = document.getElementById('popupTitle');
    const teamIdInput = document.getElementById('teamId');
    const teamNameInput = document.getElementById('teamName');
    const teamInfoInput = document.getElementById('teamInfo');
    const currentTeamMembersList = document.getElementById('currentTeamMembersList');
    const availableUsersSelect = document.getElementById('availableUsersSelect');
    const addNewTeamBtn = document.getElementById('addNewTeamBtn');
    const addUserToTeamBtn = document.getElementById('addUserToTeamBtn');
    const saveTeamBtn = document.getElementById('saveTeamBtn');
    const deleteTeamBtn = document.getElementById('deleteTeamBtn');
    const cancelPopupBtn = document.getElementById('cancelPopupBtn');
    const generateReportBtn = document.getElementById('generateReportBtn');
    const efficiencyReportPopup = document.getElementById('efficiencyReportPopup');
    const efficiencyReportContent = document.getElementById('efficiencyReportContent');
    const reportLoadingMessage = document.getElementById('reportLoadingMessage');
    const reportErrorMessage = document.getElementById('reportErrorMessage');
    const reportNoDataMessage = document.getElementById('reportNoDataMessage');
    const efficiencyReportTable = document.getElementById('efficiencyReportTable');
    const efficiencyReportTableBody = document.getElementById('efficiencyReportTableBody');
    const reportPopupCloseBtn = document.getElementById('reportPopupCloseBtn');


    let currentEditTeamId = null;  

    function showPopup(popupElement) {
      popupElement.style.display = 'flex';
    }

    function hidePopup(popupElement) {
      popupElement.style.display = 'none';
      if (popupElement === teamPopup) {
        currentEditTeamId = null; 
        teamIdInput.value = '';
        teamNameInput.value = '';
        teamInfoInput.value = '';
        currentTeamMembersList.innerHTML = '';
        availableUsersSelect.innerHTML = '<option value="">Select user to add</option>';
        deleteTeamBtn.style.display = 'inline-block'; 
      }

      if (popupElement === efficiencyReportPopup) {
          reportLoadingMessage.style.display = 'none';
          reportErrorMessage.style.display = 'none';
          reportNoDataMessage.style.display = 'none';
          efficiencyReportTable.style.display = 'none';
          efficiencyReportTableBody.innerHTML = '';
      }
    }

    /*
    function renderTeamMembers(members) {
        currentTeamMembersList.innerHTML = '';
        if (members && members.length > 0) {
            members.forEach(member => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <span>${member.first_name} ${member.last_name} (${member.username})</span>
                    <button class="remove-btn" data-user-id="${member.id}">Remove</button>
                `;
                currentTeamMembersList.appendChild(li);
            });
        } else {
            currentTeamMembersList.innerHTML = '<li>No members yet.</li>';
        }
    }

    function populateAvailableUsers(users) {
        availableUsersSelect.innerHTML = '<option value="">Select user to add</option>';
        users.forEach(user => {
            const option = document.createElement('option');
            option.value = user.id;
            option.textContent = `${user.first_name} ${user.last_name} (${user.username})`;
            availableUsersSelect.appendChild(option);
        });
    }

    async function fetchTeams() {
      loadingMessage.style.display = 'block';
      teamsContainer.innerHTML = ''; 
      try {
        const response = await fetch('/api/manager/teams/');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const teams = await response.json();
        renderTeams(teams);
      } catch (error) {
        console.error('Error fetching teams:', error);
        teamsContainer.innerHTML = '<p>Error loading teams. Please try again.</p>';
        noTeamsMessage.style.display = 'none';
      } finally {
        loadingMessage.style.display = 'none';
      }
    }

    function renderTeams(teams) {
        teamsContainer.innerHTML = ''; 
        if (teams.length === 0) {
            noTeamsMessage.style.display = 'block';
        } else {
            noTeamsMessage.style.display = 'none';
            teams.forEach(team => {
                const teamBox = document.createElement('div');
                teamBox.classList.add('team-box');
                teamBox.textContent = team.name;
                teamBox.dataset.teamId = team.id;  
                teamBox.onclick = () => openTeamPopup(team.id);
                teamsContainer.appendChild(teamBox);
            });
        }
    }

    async function fetchTeamDetails(teamId) {
        try {
            const response = await fetch(`/api/teams/${teamId}/`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const team = await response.json();
            return team;
        } catch (error) {
            console.error('Error fetching team details:', error);
            alert('Failed to load team details.');
            return null;
        }
    }

    async function fetchAvailableUsers() {
        try {
            const response = await fetch('/api/users/unassigned/'); 
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const users = await response.json();
            return users;
        } catch (error) {
            console.error('Error fetching available users:', error);
            return [];
        }
    }

    async function openTeamPopup(teamId = null) {
      currentEditTeamId = teamId;
      hidePopup(teamPopup); 

      if (teamId) {
        popupTitle.textContent = 'Edit Team';
        deleteTeamBtn.style.display = 'inline-block'; 
        const team = await fetchTeamDetails(teamId);
        if (team) {
          teamIdInput.value = team.id;
          teamNameInput.value = team.name;
          renderTeamMembers(team.members);
        }
      } else {
        popupTitle.textContent = 'Add New Team';
        deleteTeamBtn.style.display = 'none'; 
      }
      
      const availableUsers = await fetchAvailableUsers();
      populateAvailableUsers(availableUsers);

      showPopup(teamPopup);
    }

    async function saveTeam() {
      const teamId = teamIdInput.value;
      const teamName = teamNameInput.value.trim();

      if (!teamName) {
        alert('Team Name cannot be empty.');
        return;
      }

      const method = teamId ? 'PUT' : 'POST';
      const url = teamId ? `/api/teams/${teamId}/` : '/api/manager/teams/';
      
      try {
        const response = await fetch(url, {
          method: method,
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
          },
          body: JSON.stringify({
            name: teamName,
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(`Failed to save team: ${errorData.message || response.statusText}`);
        }

        alert('Team saved successfully!');
        hidePopup(teamPopup);
        fetchTeams(); 
      } catch (error) {
        console.error('Error saving team:', error);
        alert(error.message);
      }
    }

    async function deleteTeam() {
        if (!confirm('Are you sure you want to delete this team? This action cannot be undone.')) {
            return;
        }

        const teamId = teamIdInput.value;
        try {
            const response = await fetch(`/api/teams/${teamId}/`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': getCookie('csrftoken')
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Failed to delete team: ${errorData.message || response.statusText}`);
            }

            alert('Team deleted successfully!');
            hidePopup(teamPopup);
            fetchTeams(); 
        } catch (error) {
            console.error('Error deleting team:', error);
            alert(error.message);
        }
    }

    async function addUserToTeam() {
        const userId = availableUsersSelect.value;
        const teamId = teamIdInput.value;

        if (!userId) {
            alert('Please select a user to add.');
            return;
        }
        if (!teamId) {
            alert('Cannot add user: no team selected.');
            return;
        }

        try {
            const response = await fetch(`/api/teams/${teamId}/add_user/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                },
                body: JSON.stringify({ user_id: userId })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Failed to add user: ${errorData.message || response.statusText}`);
            }

            alert('User added to team successfully!');
            openTeamPopup(teamId); 
        } catch (error) {
            console.error('Error adding user to team:', error);
            alert(error.message);
        }
    }

    async function removeUserFromTeam(userId) {
        const teamId = teamIdInput.value;
        if (!teamId) {
            alert('Cannot remove user: no team selected.');
            return;
        }

        if (!confirm('Are you sure you want to remove this user from the team?')) {
            return;
        }

        try {
            const response = await fetch(`/api/teams/${teamId}/remove_user/`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCookie('csrftoken')
                },
                body: JSON.stringify({ user_id: userId })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Failed to remove user: ${errorData.message || response.statusText}`);
            }

            alert('User removed from team successfully!');
            openTeamPopup(teamId); 
        } catch (error) {
            console.error('Error removing user from team:', error);
            alert(error.message);
        }
    }
        
    currentTeamMembersList.addEventListener('click', (event) => {
        if (event.target.classList.contains('remove-btn')) {
            const userId = event.target.dataset.userId;
            removeUserFromTeam(userId);
        }
    });
    */

    async function generateEfficiencyReport() {
        hidePopup(efficiencyReportPopup); 
        showPopup(efficiencyReportPopup); 
        reportLoadingMessage.style.display = 'block';
        reportErrorMessage.style.display = 'none';
        reportNoDataMessage.style.display = 'none';
        efficiencyReportTable.style.display = 'none';
        efficiencyReportTableBody.innerHTML = ''; 

        try {
            const response = await fetch('/api/teams/efficiency-report/');
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to fetch efficiency report.');
            }
            const data = await response.json();
            const reportData = data.teams;  

            reportLoadingMessage.style.display = 'none';

            if (reportData.length === 0) {
                reportNoDataMessage.style.display = 'block';
                return "booboo";
            }

            efficiencyReportTable.style.display = 'table';  
            reportData.forEach(team => {
                const row = efficiencyReportTableBody.insertRow();
                
                const ratingClass = team.efficiency_rating >= 0.8 ? 'high' : 
                                    (team.efficiency_rating >= 0.5 ? 'medium' : 'low');

                row.innerHTML = `
                    <td>${team.team_name}</td>
                    <td class="efficiency-rating-cell ${ratingClass}">${(team.efficiency_rating * 100).toFixed(2)}%</td>
                    <td>${team.early_completions}</td>
                    <td>${team.on_time_completions}</td>
                    <td>${team.overdue_completions}</td>
                    <td>${team.total_completed_demands}</td>
                `;
            });

        } catch (error) {
            console.error('Error generating efficiency report:', error);
            reportLoadingMessage.style.display = 'none';
            reportErrorMessage.textContent = `Error: ${error.message}`;
            reportErrorMessage.style.display = 'block';
        }
    }


    addNewTeamBtn.addEventListener('click', () => openTeamPopup(null));
    cancelPopupBtn.addEventListener('click', () => hidePopup(teamPopup));
    //saveTeamBtn.addEventListener('click', saveTeam);
    //deleteTeamBtn.addEventListener('click', deleteTeam);
    //addUserToTeamBtn.addEventListener('click', addUserToTeam);
    generateReportBtn.addEventListener('click', generateEfficiencyReport); 
    reportPopupCloseBtn.addEventListener('click', () => hidePopup(efficiencyReportPopup)); 



    document.addEventListener('DOMContentLoaded', fetchTeams);


    // csrf cookie handling
        function getCookie(name) {
      let cookieValue = null;
      if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + '=')) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }

  </script>
</body>
</html>
